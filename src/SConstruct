# -*- mode: python -*-
# ET build script
# TTimo <ttimo@idsoftware.com>
# http://scons.sourceforge.net

import sys, os, time, commands, re, pickle, StringIO, popen2, commands, pdb, zipfile, string, tempfile
import SCons

import scons_utils

conf_filename='site.conf'
# choose configuration variables which should be saved between runs
# ( we handle all those as strings )
serialized=[ 'CC', 'CXX', 'JOBS', 'BUILD', 'BUILD_ROOT', 'GAMERANGER', 'X64_OBJECTS' ]

# help -------------------------------------------

Help("""
Usage: scons [OPTIONS] [TARGET] [CONFIG]

[OPTIONS] and [TARGET] are covered in command line options, use scons -H

[CONFIG]: KEY="VALUE" [...]
a number of configuration options saved between runs in the """ + conf_filename + """ file
erase """ + conf_filename + """ to start with default settings again

CC (default gcc)
CXX (default g++)
	Specify C and C++ compilers (defaults gcc and g++)
	ex: CC="gcc-3.3"
	You can use ccache and distcc, for instance:
	CC="ccache distcc gcc" CXX="ccache distcc g++"

JOBS (default 1)
	Parallel build

BUILD (default debug)
	Use debug-all/debug/release to select build settings
	ex: BUILD="release"
	debug-all: no optimisations, debugging symbols
	debug: -O -g
	release: all optimisations, including CPU target etc.
	
DEDICATED (default 1)
	Control regular / dedicated type of build:
	0 - client
	1 - dedicated server
	2 - both

X64_OBJECTS (default 0)
	Build target(s) as x86_64 object(s)

BUILD_ROOT (default 'build')
	change the build root directory
	
NOCONF (default 0, not saved)
	ignore site configuration and use defaults + command line only

COPYBINS (default 1, not saved)
	copy the binaries in a ready-to-release format

BUILDMPBIN (default 0, not saved)
	build mp_bin.pk3 using bin/ directories and game binaries for all platforms
"""
)

# end help ---------------------------------------

# sanity -----------------------------------------

EnsureSConsVersion( 0, 96 )

# end sanity -------------------------------------

# system detection -------------------------------

# CPU type
march = 'i686'
cpu = commands.getoutput('uname -m')
dll_cpu = '???' # grmbl, alternative naming for .so

exp = re.compile('.*i.86.*')
if exp.match(cpu):
	cpu = 'x86'
	dll_cpu = 'i386'
elif ( cpu == 'x86_64' ):
	if ( X64_OBJECTS == '1' ):
		march = 'x86-64'
		dll_cpu = cpu
	else:
		cpu = 'x86'
		dll_cpu = 'i386'

OS = commands.getoutput( 'uname -s' )

print 'cpu: ' + cpu

# end system detection ---------------------------

# default settings -------------------------------

CC = 'gcc'
CXX = 'g++'
JOBS = '1'
BUILD = 'release'
DEDICATED = '1'
GAMERANGER = '0'
X64_OBJECTS = '0'
BUILD_ROOT = 'build'
NOCONF = '0'
COPYBINS = '1'
BUILDMPBIN = '0'

# end default settings ---------------------------

# site settings ----------------------------------

if ( not ARGUMENTS.has_key( 'NOCONF' ) or ARGUMENTS['NOCONF'] != '1' ):
	site_dict = {}
	if (os.path.exists(conf_filename)):
		site_file = open(conf_filename, 'r')
		p = pickle.Unpickler(site_file)
		site_dict = p.load()
		print 'Loading build configuration from ' + conf_filename + ':'
		for k, v in site_dict.items():
			exec_cmd = k + '=\'' + v + '\''
			print '  ' + exec_cmd
			exec(exec_cmd)
else:
	print 'Site settings ignored'

# end site settings ------------------------------

# command line settings --------------------------

for k in ARGUMENTS.keys():
	exec_cmd = k + '=\'' + ARGUMENTS[k] + '\''
	print 'Command line: ' + exec_cmd
	exec( exec_cmd )

# end command line settings ----------------------

# arch detection ---------------------------------

def gcc_major():
	major = os.popen( CC + ' -dumpversion' ).read().strip()
	print 'dumpversion: %s' % major
	major = re.sub('^([^.]+)\\..*$', '\\1', major)
	print 'gcc major: %s' % major
	return major

gcc_major_ver = gcc_major()
gcc3 = (gcc_major_ver != '2')

g_os = 'Linux'

print 'os: %s' % g_os

# end arch detection -----------------------------

# save site configuration ----------------------

if ( not ARGUMENTS.has_key( 'NOCONF' ) or ARGUMENTS['NOCONF'] != '1' ):
	for k in serialized:
		exec_cmd = 'site_dict[\'' + k + '\'] = ' + k
		exec(exec_cmd)

	site_file = open(conf_filename, 'w')
	p = pickle.Pickler(site_file)
	p.dump(site_dict)
	site_file.close()

# end save site configuration ------------------

# general configuration, target selection --------

g_build = BUILD_ROOT + '/' + BUILD

SConsignFile( 'scons.signatures' )

SetOption('num_jobs', JOBS)

LINK = CC

# common flags
# BASE + GAME + OPT for game

BASECPPFLAGS = [ ]
CORECPPPATH = [ ]
CORELIBPATH = [ ]
CORECPPFLAGS = [ ]
GAMECPPFLAGS = [ ]
BASELINKFLAGS = [ ]
CORELINKFLAGS = [ ]

# for release build, further optimisations that may not work on all files
OPTCPPFLAGS = [ ]

if ( OS == 'Linux' ):
	if ( cpu == 'x86' ):
		BASECPPFLAGS += [ '-m32' ]
		BASELINKFLAGS += [ '-m32' ]
	elif ( cpu == 'x86_64' ):
		BASECPPFLAGS += [ '-m64' ]
		BASELINKFLAGS += [ '-m64' ]

BASECPPFLAGS.append( '-pipe' )
# warn all
BASECPPFLAGS.append( '-Wall' )
# don't wrap gcc messages
BASECPPFLAGS.append( '-fmessage-length=0' )

if ( BUILD == 'debug-all' ):
	BASECPPFLAGS.append( '-g' )
	BASECPPFLAGS.append( '-D_DEBUG' )
elif ( BUILD == 'debug' ):
	BASECPPFLAGS.append( '-g' )
	BASECPPFLAGS.append( '-O1' )
	BASECPPFLAGS.append( '-D_DEBUG' )
elif ( BUILD == 'release' ):
	BASECPPFLAGS.append( '-DNDEBUG' )
	# -finline-functions: implicit at -O3
	# -fschedule-insns2: implicit at -O3
	# -funroll-loops ?
	# -mfpmath=sse -msse ?
	OPTCPPFLAGS = [ '-O3', '-march=%s' % march, '-Winline', '-ffast-math', '-finline-functions', '-fschedule-insns2' ]
else:
	print 'Unknown build configuration ' + BUILD
	sys.exit(0)

# create the build environments
g_base_env = Environment( ENV = os.environ, CC = CC, CXX = CXX, LINK = LINK, CPPFLAGS = BASECPPFLAGS, LINKFLAGS = BASELINKFLAGS, CPPPATH = CORECPPPATH, LIBPATH = CORELIBPATH )
scons_utils.SetupUtils( g_base_env )

g_env = g_base_env.Copy()

g_env['CPPFLAGS'] += OPTCPPFLAGS
g_env['CPPFLAGS'] += CORECPPFLAGS
g_env['LINKFLAGS'] += CORELINKFLAGS

# maintain this dangerous optimization off at all times
g_env.Append( CPPFLAGS = '-fno-strict-aliasing' )

if ( int(JOBS) > 1 ):
	print 'Using buffered process output'
	scons_utils.SetupBufferedOutput( g_env )

# mark the globals

GLOBALS = 'g_env OS g_os BUILD gcc3 gcc_major_ver cpu GAMERANGER'

# end general configuration ----------------------

# targets ----------------------------------------

toplevel_targets = []

Export( 'GLOBALS ' + GLOBALS )
BuildDir( g_build + '/game', '.', duplicate = 0 )
game = SConscript( g_build + '/game/SConscript.game' )
toplevel_targets.append( InstallAs( '#qagame.mp.%s.so' % dll_cpu, game ) )

class CopyBins(scons_utils.idSetupBase):
	def copy_bins( self, target, source, env ):
		for i in source:
			j = os.path.normpath( os.path.join( os.path.dirname( i.abspath ), '../bin', os.path.basename( i.abspath ) ) )
			self.SimpleCommand( 'cp ' + i.abspath + ' ' + j )
			if ( OS == 'Linux' ):
				self.SimpleCommand( 'strip ' + j )
			else:
				# see strip and otool man pages on mac
				self.SimpleCommand( 'strip -ur ' + j )

copybins_target = []
if ( COPYBINS != '0' ):
	copy = CopyBins()
	copybins_target.append( Command( 'copybins', toplevel_targets, Action( copy.copy_bins ) ) )

# end targets ------------------------------------
